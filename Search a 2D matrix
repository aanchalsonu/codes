/*
You are given an m x n integer matrix matrix with the following two properties:

Each row is sorted in non-decreasing order.
The first integer of each row is greater than the last integer of the previous row.
Given an integer target, return true if target is in matrix or false otherwise.

You must write a solution in O(log(m * n)) time complexity.
*/
// Applying binary search on 2D matrix

class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int n,m,i,j,s,e,mid;
        n = matrix.size(); // Row 
        m = matrix[0].size(); //column
        s=0;
        e = n*m-1; //consider the matrix to be a single array then e = n*m-1
        mid = s+(e-s)/2; // mid points to index of middle element in an single array
        while(s<=e)
        {
            int row=mid/m; // to convert the mid index into 2D array index we do mid/column size to get row index and mid%column size to get column index
            int col = mid%m;
            if(matrix[row][col] == target) // Binary search algorithm
            {
                return true;
            }
            else if(matrix[row][col] < target)
            {
                s = mid+1;
            }
            else
            {
                e = mid-1;
            }
            mid = s+(e-s)/2;
        }
        return false;
    }
};
