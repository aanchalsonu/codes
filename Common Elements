/*

Given three arrays sorted in increasing order. Find the elements that are common in all three arrays.
Note: can you take care of the duplicates without using any additional Data Structure?

Example 1:

Input:
n1 = 6; A = {1, 5, 10, 20, 40, 80}
n2 = 5; B = {6, 7, 20, 80, 100}
n3 = 8; C = {3, 4, 15, 20, 30, 70, 80, 120}
Output: 20 80
Explanation: 20 and 80 are the only
common elements in A, B and C.

*/

/* 

SOLUTION APPROACH:

Consider 3 pointers i j and k pointing to A B and C
iterate through A B and C using i j and k
three conditions are possible 
1. All the elements are equal then push the element into the answer vector
also check that no repeated elements are put into the vetor by using back funtion 
ie : ans.back() != A[i]

2. If A[i] is less then B[j] and C[k]
then increment i

3. If B[j] is less then A[i] and C[k] then increment j;

4. else C[k] is less then A[i] and B[j] so increment k

finally return the vector answer
*/


//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
class Solution
{
    public:    
       vector <int> commonElements (int A[], int B[], int C[], int n1, int n2, int n3)
        {
            //code here.
            vector<int> ans;
            
            int i=0,j=0,k=0;
            
            while(i < n1 && j<n2 && k<n3)
            {
                if(A[i] == B[j] && A[i] == C[k] && B[j] == C[k])
                {
                    if(ans.empty() || ans.back() != A[i])
                    ans.push_back(A[i]);
                    i++;
                    j++;
                    k++;
                }
                else if(A[i] <= B[j] && A[i]<= C[k])
                i++;
                else if(B[j] <= A[i] && B[j] <= C[k])
                j++;
                else
                k++;
            }
            
            
            
            // map<int,int> mp;
            // int n = n1+n2+n3;
            // for(int i=0;i<n;i++)
            // {
            //     mp[A[i]]++;
            //     mp[B[i]]++;
            //     mp[C[i]]++;
            // }
            // for(int i=0;i<mp.size();i++)
            // {
            //     if(mp[i] >= 3)
            //     {
            //         ans.push_back(i);
            //     }
            // }
            return ans;
        }

};

//{ Driver Code Starts.

int main ()
{
    int t; cin >> t;
    while (t--)
    {
        int n1, n2, n3; 
        cin >> n1 >> n2 >> n3;
        int A[n1];
        int B[n2];
        int C[n3];
        
        for (int i = 0; i < n1; i++) cin >> A[i];
        for (int i = 0; i < n2; i++) cin >> B[i];
        for (int i = 0; i < n3; i++) cin >> C[i];
        
        Solution ob;
        
        vector <int> res = ob.commonElements (A, B, C, n1, n2, n3);
        if (res.size () == 0) 
            cout << -1;
        for (int i = 0; i < res.size (); i++) 
            cout << res[i] << " "; 
        cout << endl;
    }
}
// } Driver Code Ends
