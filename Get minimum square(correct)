/*
Given a number N. Find the minimum number of squares of any number that sums to N. For Example: If N = 100 , N can be expressed as 

(10*10) and also as (5*5 + 5*5 + 5*5 + 5*5) but the output will be 1 as minimum number of square is 1 , i.e (10*10).
 

Example 1:

Input: N = 100
Output: 1
Explanation: 10 * 10 = 100
Example 2:

Input: N = 6
Output: 3
Explanation = 1 * 1 + 1 * 1 + 2 * 2 = 6
 

Your Task:
You don't need to read or print anyhting. Your task is to complete the function MinSquares() which takes N as input parameter and returns minimum number of squares needed to make N.
 

Expcted Time Complexity: O(N * sqrt(N) )
Expected Space Complexity: O(N)

*/

//{ Driver Code Starts
//Initial Template for C++

#include<bits/stdc++.h>
using namespace std;

// } Driver Code Ends
//User function Template for C++

class Solution{
	public:
	
	int solve(int n,vector<int> &dp)
	{
	    //base case
	    if(n==0)
	    return 0;
	    
	    if(dp[n]!= -1)
	    return dp[n];
	    
	    int ans=n;
	    for(int i=1;i*i<=n;i++)
	    {
	        ans = min(ans,1+solve(n-(i*i),dp));
	    }
	    
	    dp[n] = ans;
	    return dp[n];
	    
	    
	}
	
	
	int MinSquares(int n)
	{
	    vector<int> dp(n+1,-1);
	    return solve(n,dp); 
	}
};

//{ Driver Code Starts.
int main(){
	int tc;
	cin >> tc;
	while(tc--){
		int n;
		cin >> n;
		Solution ob;
		int ans = ob.MinSquares(n);
		cout << ans <<"\n";
	}
	return 0;
}
// } Driver Code Ends
