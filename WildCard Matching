/*
Given an input string (s) and a pattern (p), implement wildcard pattern matching with support for '?' and '*' where:

'?' Matches any single character.
'*' Matches any sequence of characters (including the empty sequence).
The matching should cover the entire input string (not partial).

 

Example 1:

Input: s = "aa", p = "a"
Output: false
Explanation: "a" does not match the entire string "aa".
Example 2:

Input: s = "aa", p = "*"
Output: true
Explanation: '*' matches any sequence.
*/

class Solution {
public:

    bool solve(string &s, string &p, int i, int j)
    {
        //base cases

        if(i<0 && j<0)
        return true;

        if(i>=0 && j<0)
        return false;

        if(i < 0 && j>= 0)
        {
            for(int k=0;k<=j;k++)
            {
                if(p[k] != '*')
                {
                    return false;
                }
            }
            return true;
        }

        if(s[i] == p[j] || p[j] == '?')
        {
            return solve(s,p,i-1,j-1);
        }
        else if(p[j] == '*')
        {
            return (solve(s,p,i-1,j) || solve(s,p,i,j-1));
        }
        else
        return false;

    } 

    bool solveMem(string &s, string &p, int i, int j,vector<vector<int>>& dp)
    {
        //base cases

        if(i<0 && j<0)
        return true;

        if(i>=0 && j<0)
        return false;

        
        if(i < 0 && j>= 0)
        {
            for(int k=0;k<=j;k++)
            {
                if(p[k] != '*')
                {
                    return false;
                }
            }
            return true;
        }

        if(dp[i][j] != -1)
        return dp[i][j];


        if(s[i] == p[j] || p[j] == '?')
        {
            return dp[i][j] = solveMem(s,p,i-1,j-1,dp);
        }
        else if(p[j] == '*')
        {
            return dp[i][j]= (solveMem(s,p,i-1,j,dp) || solveMem(s,p,i,j-1,dp));
        }
        else
        return false;

    } 


    bool isMatch(string s, string p) {
        // return solve(s,p,s.length()-1,p.length()-1);


        vector<vector<int>> dp(s.length()+1, vector<int>(p.length()+1,-1));
        return solveMem(s,p,s.length(),p.length(),dp);

    }
};
