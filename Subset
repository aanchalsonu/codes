/*
Given an integer array nums of unique elements, return all possible 
subsets
 (the power set).

The solution set must not contain duplicate subsets. Return the solution in any order.

Input: nums = [1,2,3]
Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]

*/

class Solution {
public:

    void solve(vector<int> output, vector<vector<int>>& ans,int index,vector<int> nums)
    {
        //Base case when index goes out of array size
        if(index >= nums.size())
        {
            ans.push_back(output);
            return;
        }

        //Exclude the number
        solve(output,ans,index+1,nums);

        //Include the number
        output.push_back(nums[index]);
        solve(output,ans,index+1,nums);

    }

    vector<vector<int>> subsets(vector<int>& nums) {
        //power set is the set which contains all the subsets

        int index=0;
        vector<vector<int>> ans;
        vector<int> output;

        solve(output,ans,index,nums);
        return ans;

    }
};
