/*
Given an array called A[] of sorted integers having no duplicates, find the length of the Longest Arithmetic Progression (LLAP) in it.


Example 1:

Input:
N = 6
set[] = {1, 7, 10, 13, 14, 19}
Output: 4
Explanation: The longest arithmetic 
progression is {1, 7, 13, 19}.
Example 2:

Input:
N = 5
A[] = {2, 4, 6, 8, 10}
Output: 5
Explanation: The whole set is in AP.

Your Task:
You don't need to read input or print anything. Your task is to complete the function lenghtOfLongestAP() which takes the array of integers
called set[] and n as input parameters and returns the length of LLAP.

*/

//{ Driver Code Starts
//Initial template for C++

#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
//User function template for C++

class Solution{   
public:
    int lengthOfLongestAP(int A[], int n) {
        //base case
        if(n <= 2)
        return n;
        
        // create a dp 
        unordered_map<int,int> dp[n+1];
        int cnt;
        int ans = INT_MIN;
        for(int i = 1;i<n;i++)
        {
            for(int j=0;j<i;j++)
            {
                int diff = A[i]-A[j];
                
                cnt =1;
                
                if(dp[j].count(diff))
                cnt = dp[j][diff];
                
                dp[i][diff] = 1 + cnt;
                
                ans = max(ans,dp[i][diff]);
                
            }
        }
        
        return ans;
    }
};

//{ Driver Code Starts.
int main() {
    int t;
    cin >> t;
    while (t--) {
        int n;
        cin >> n;
        int A[n];
        for (int i = 0; i < n; i++) {
            cin >> A[i];
        }
        Solution ob;
        auto ans = ob.lengthOfLongestAP(A, n);
        cout << ans << "\n";
    }
    return 0;
}
// } Driver Code Ends
