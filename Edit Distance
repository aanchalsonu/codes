/*
Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.

You have the following three operations permitted on a word:

Insert a character
Delete a character
Replace a character
 

Example 1:

Input: word1 = "horse", word2 = "ros"
Output: 3
Explanation: 
horse -> rorse (replace 'h' with 'r')
rorse -> rose (remove 'r')
rose -> ros (remove 'e')
Example 2:

Input: word1 = "intention", word2 = "execution"
Output: 5
Explanation: 
intention -> inention (remove 't')
inention -> enention (replace 'i' with 'e')
enention -> exention (replace 'n' with 'x')
exention -> exection (replace 'n' with 'c')
exection -> execution (insert 'u')
*/



class Solution {
public:

    int solve(string a ,string b,int i,int j)
    {
        if(i == a.length() )
        return b.length()-j;

        if(j ==b.length() )
        return a.length()-i;

        int ans=0;
        if(a[i] == b[j])
        {
            ans = 1 + solve(a,b,i+1,j+1);
        }
        else
        {
            int ins = 1 + solve(a,b,i,j+1);
            int del = 1 + solve(a,b,i+1,j);
            int repl = 1 + solve(a,b,i+1,j+1);

            ans = min(ins,min(del,repl));

        }
        return ans;

    }

    int solveMem(string& a , string& b, int i,int j,vector<vector<int>>& dp)
    {
        if(i == a.length() )
        return b.length()-j;

        if(j ==b.length())
        return a.length()-i;

        if(dp[i][j] != -1)
        return dp[i][j];

        int ans=0;
        if(a[i] == b[j])
        {
            ans =  solveMem(a,b,i+1,j+1,dp);
        }
        else
        {
            int ins = 1 + solveMem(a,b,i,j+1,dp);
            int del = 1 + solveMem(a,b,i+1,j,dp);
            int repl = 1 + solveMem(a,b,i+1,j+1,dp);

            ans = min(ins,min(del,repl));

        }

        return dp[i][j] = ans;
    }

    int minDistance(string word1, string word2) {
        // return solve(word1,word2,0,0);

        vector<vector<int>> dp(word1.length(), vector<int>(word2.length(),-1));
        return solveMem(word1,word2,0,0,dp);

    }
};


