/*
A celebrity is a person who is known to all but does not know anyone at a party. If you go to a party of N people, find if there is a celebrity in the party or not.
A square NxN matrix M[][] is used to represent people at the party such that if an element of row i and column j  is set to 1 it means ith person knows jth 
person. Here M[i][i] will always be 0.
Note: Follow 0 based indexing.
Follow Up: Can you optimize it to O(N)
 

Example 1:

Input:
N = 3
M[][] = {{0 1 0},
         {0 0 0}, 
         {0 1 0}}
Output: 1
Explanation: 0th and 2nd person both
know 1. Therefore, 1 is the celebrity. 
*/


//{ Driver Code Starts
//Initial template for C++

#include<bits/stdc++.h>
using namespace std;

// } Driver Code Ends
//User function template for C++

class Solution 
{
    public:
    bool knows(vector<vector<int> >& M, int a,int b,int n)
    {
        if(M[a][b] == 1)
        return true;
        else 
        return false;
    }
    //Function to find if there is a celebrity in the party or not.
    int celebrity(vector<vector<int> >& M, int n) 
    {
        //create a stack and push all the peoples into it mans push i into it
        stack<int>s;
        int i;
        for(int i=0;i<n;i++)
        {
            s.push(i);
        }
        
        while(s.size() > 1)
        {
            int a,b;
            a = s.top();
            s.pop();
            
            b = s.top();
            s.pop();
            
            if(knows(M,a,b,n))
            {
                s.push(b);
            }
            else
            {
                s.push(a);
            }
            
        }
        int last = s.top();
        
        //the celebrity must not know anyone and hence its roe count must be equal to n Ie : A;; should have zero value
        int rc=0;
        for(i=0;i<n;i++)
        {
            if(M[last][i] == 0)
            rc++; // row count
        }
        
        int cc=0; // column count
        for(i=0;i<n;i++)
        {
            if(M[i][last] == 1)
            cc++;
        }
        
        if((rc==n) && (cc==(n-1)))
        {
            return last;
        }
        else
        return -1;
        
    }
};

//{ Driver Code Starts.

int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        int n;
        cin>>n;
        vector<vector<int> > M( n , vector<int> (n, 0));
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<n;j++)
            {
                cin>>M[i][j];
            }
        }
        Solution ob;
        cout<<ob.celebrity(M,n)<<endl;

    }
}

// } Driver Code Ends
