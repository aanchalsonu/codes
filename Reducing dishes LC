/*
A chef has collected data on the satisfaction level of his n dishes. Chef can cook any dish in 1 unit of time.

Like-time coefficient of a dish is defined as the time taken to cook that dish including previous dishes multiplied by its satisfaction level
i.e. time[i] * satisfaction[i].

Return the maximum sum of like-time coefficient that the chef can obtain after dishes preparation.

Dishes can be prepared in any order and the chef can discard some dishes to get this maximum value.

Input: satisfaction = [-1,-8,0,5,-9]
Output: 14
Explanation: After Removing the second and last dish, the maximum total like-time coefficient will be equal to (-1*1 + 0*2 + 5*3 = 14).
Each dish is prepared in one unit of time.


 */
 
 class Solution {
public:

    int solve(vector<int>& satisfaction, int index,int time, vector<vector<int>> &dp)
    {
        //base case when index goes out of array
        int n = satisfaction.size();
        if(index == n)
        return 0;

        //dp condition
        if(dp[index][time] != -1)
        return dp[index][time];

        //two cases possible wheather to include that particular element or to exclude
        //if included then calculate like time coefficient

        int include = satisfaction[index] * (time+1) + solve(satisfaction,index+1,time+1,dp);

        int exclude = solve(satisfaction,index+1,time,dp);
        //here nothing is included so only index increases its count and time remains the same
        //the answer will be maximum of include and exclude
        dp[index][time] = max(include,exclude);
        return dp[index][time];


    }



    int maxSatisfaction(vector<int>& satisfaction) {
        //solving by memorization
        int n = satisfaction.size();
        sort(satisfaction.begin(),satisfaction.end());
        vector<vector<int>> dp(n+1,vector<int> (n+1,-1));

        return solve(satisfaction,0,0,dp);

    }
};
