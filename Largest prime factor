/*

Given a number N, the task is to find the largest prime factor of that number.
 

Example 1:

Input:
N = 5
Output:
5
Explanation:
5 has 1 prime factor 
i.e 5 only.
Example 2:

Input:
N = 24
Output:
3
Explanation:
24 has 2 prime factors 
3 and 2 in which 3 is 
greater
*/


//{ Driver Code Starts
#include<bits/stdc++.h> 
using namespace std;

// } Driver Code Ends
class Solution{
public: 

    bool isprime(int n)
    {
        if(n<2)
        {
            return false;
        }
        for(int i=2;i<=sqrt(n);i++)
        {
            if(n%i ==0)
            return false;
        }
        return true;
    }
    long long int largestPrimeFactor(int n){
        // code here
        vector<int> a;
        
        for(long long int i=2;i<=n;i++)
        {
            if(isprime(i))
            {
                if(n%i == 0)
                a.push_back(i);
            }
        }
        
        int x = a.size();
        return a[x-1];
        
        // while(n%2 ==0 )
        // {
        //     a.push_back(2);
        //     n=n/2;
        // }
        // int i=3;
        // while(i<sqrt(n))
        // {
        //     if(n%i == 0)
        //     {
        //         a.push_back(i);
        //     }
        //     i += 2;
        // }
        // if(a.empty())
        // return n;
        // else
        // {
        //     int maxi=0;
        //     for(int i=0;i<a.size();i++)
        //     {
        //         if(a[i] >maxi)
        //         maxi= a[i];
        //     }
        //     return maxi;
        // }
        
    }
};

//{ Driver Code Starts.
int main() 
{ 
    int t;
    cin>>t;
    while(t--)
    {
        int N;
        cin>>N;
        Solution ob;
        cout << ob.largestPrimeFactor(N) << endl;
    }
    return 0; 
}
// } Driver Code Ends
