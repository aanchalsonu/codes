/*
You are given an integer array prices where prices[i] is the price of a given stock on the ith day, and an integer k.

Find the maximum profit you can achieve. You may complete at most k transactions.

Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

 

Example 1:

Input: k = 2, prices = [2,4,1]
Output: 2
Explanation: Buy on day 1 (price = 2) and sell on day 2 (price = 4), profit = 4-2 = 2.
Example 2:

Input: k = 2, prices = [3,2,6,5,0,3]
Output: 7
Explanation: Buy on day 2 (price = 2) and sell on day 3 (price = 6), profit = 6-2 = 4. Then buy on day 5 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.
*/

class Solution {
public:

    int solveMem(int index, int buy,vector<int>& prices,int limit,vector<vector<vector<int>>> &dp)
    {
        //base case
        if(index >= prices.size())
        return 0;

        //if limit iis reached then come out
        if(limit == 0)
        return 0;

        //if you can buy then 
        //there are two cases either buy or sell , if allready buyed then only option is sell
        // if buying then profit with decrease by price[i] and if selling profit will increase by
        //  price[i]

        if(dp[index][buy][limit] != -1)
        return dp[index][buy][limit];

        int profit=0; 
        if(buy)
        {
            //buy : if buy is 1 then im allowed to buy and mark it 0 so that no other stock can be buyed
            int buykaro = -prices[index] + solveMem(index+1,0,prices,limit,dp);
            int skipkaro = 0 + solveMem(index+1,1,prices,limit,dp);
            profit  = max(buykaro,skipkaro);
            dp[index][buy][limit] = profit;
        }
        else
        {
            //sell
            int sellkaro = prices[index] + solveMem(index+1,1,prices,limit-1,dp);
            int skipkaro = 0 + solveMem(index+1,0,prices,limit,dp);
            profit = max(sellkaro,skipkaro);
            dp[index][buy][limit] = profit;
        }
        return dp[index][buy][limit];
    }


    int maxProfit(int k, vector<int>& prices) {
        int n= prices.size();
        // vector<vector<int>> dp(n,vector<int>(2,-1));
        vector<vector<vector<int>>> dp(n,vector<vector<int>>(2,vector<int>(k+1,-1)));
        return solveMem(0,1,prices,k,dp);
    }
};
