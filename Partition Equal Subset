/*

Given an array arr[] of size N, check if it can be partitioned into two parts such that the sum of elements in both parts is the same.

Example 1:

Input: N = 4
arr = {1, 5, 11, 5}
Output: YES
Explanation: 
The two parts are {1, 5, 5} and {11}.


nput: N = 3
arr = {1, 3, 5}
Output: NO
Explanation: This array can never be 
partitioned into two such parts.


*/

//{ Driver Code Starts
// Initial Template for C++

#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
// User function Template for C++

class Solution{
public:

    bool solve(int index,int arr[], int N,int target)
    {
        //base case
        if(index >= N)
        return 0;
        
        if(target < 0)
        return 0;
        
        if(target  == 0)
        return 1;
        
        
        bool inclu = solve(index+1,arr,N,target-arr[index]);
        bool exclu = solve(index+1,arr,N,target);
        
        return inclu or exclu;
    }
    
    
    bool solveMem(int index,int arr[], int N,int target,vector<vector<int>> & dp)
    {
        //base case
        if(index >= N)
        return 0;
        
        if(target < 0)
        return 0;
        
        if(target  == 0)
        return 1;
        
        if(dp[index][target] != -1)
        return dp[index][target];
        
        
        bool inclu = solveMem(index+1,arr,N,target-arr[index],dp);
        bool exclu = solveMem(index+1,arr,N,target,dp);
        
        return dp[index][target] = inclu or exclu;
    }


    int equalPartition(int N, int arr[])
    {
        //recursion method
        int total=0;
        for(int i=0;i<N;i++)
        total = total +  arr[i];
        
        //if sum is odd division is not possible
        if(total & 1)
        return 0;
        
        int target = total/2;
        
        // return solve(0,arr,N,target);
        
        //memorization
        vector<vector<int>> dp(N+1,vector<int> (target+1,-1));
        
        return solveMem(0,arr,N,target,dp);
        
    }
};

//{ Driver Code Starts.

int main(){
    int t;
    cin>>t;
    while(t--){
        int N;
        cin>>N;
        int arr[N];
        for(int i = 0;i < N;i++)
            cin>>arr[i];
        
        Solution ob;
        if(ob.equalPartition(N, arr))
            cout<<"YES\n";
        else
            cout<<"NO\n";
    }
    return 0;
}
// } Driver Code Ends
