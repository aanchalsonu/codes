#include <bits/stdc++.h> 
class Deque
{
public:
    int * arr;
    int size;
    int front;
    int rear;

    Deque(int n)
    {
        arr = new int[n];
        size = n;
        front = -1;
        rear = -1;

    }

    // Pushes 'X' in the front of the deque. Returns true if it gets pushed into the deque, and false otherwise.
    bool pushFront(int x)
    {
        if(isFull())
        {
            return false;
        }
        if(isEmpty())
        {
            front = rear =0;
        }
        else if(front == 0 && rear != size-1)
        {
            front = size-1;
        }
        else{
            front--;
        }

        arr[front] = x;
        return true;


        // if((front-1)%size == rear)
        // {
        //     return false;
        // }
        // if(front == -1)
        // {
        //     front=0;
        //     rear=0;
        // }
        // else
        // {
        //     front = (front-1)%size;
        // }

        // arr[front] = x;
        // return true;
    }

    // Pushes 'X' in the back of the deque. Returns true if it gets pushed into the deque, and false otherwise.
    bool pushRear(int x)
    {

        if(isFull())
        {
            return false;
        }
        else if(isEmpty())
        {
            front=0;
            rear=0;
        }
        else if(rear == size-1 && front !=0)
        {
            rear =0;
        }
        else{
            rear++;
        }
        arr[rear] = x;
        return true;


        // if((rear+1)%size == front)
        // {
        //     return false;
        // }
        // if(front == -1)
        // {
        //     front=rear=0;
        // }
        // else
        // {
        //     rear = (rear+1)%(size); 
        // }
        // arr[rear] = x;
        // return true;
    }

    // Pops an element from the front of the deque. Returns -1 if the deque is empty, otherwise returns the popped element.
    int popFront()
    {
        if(isEmpty())
        {
            return -1;
        }
        int num = arr[front];
        if(front == rear)
        {
            front=-1;
            rear=-1;
        }
        else{
            front = (front+1)%(size);  
        }
        return num;
    }

    // Pops an element from the back of the deque. Returns -1 if the deque is empty, otherwise returns the popped element.
    int popRear()
    {
        int num;
        if(isEmpty())
        {
            return  -1;
        }
        else if( front == rear)
        {
            num = arr[rear];
            rear=-1;
            front =-1;
        }
        else if(rear == 0)
        {
            num = arr[rear];
            rear = size-1;
        }
        else{
            num = arr[rear];
            rear--;
        }
        return num;



        // if(rear == -1)
        // {
        //     return false;
        // }
        // int num = arr[rear];
        // if(front == rear)
        // {
        //     front = 0;
        //     rear =0;
        // }
        // else
        // {
        //     rear = (rear-1)%size;
        // }
        // return num;
    }

    // Returns the first element of the deque. If the deque is empty, it returns -1.
    int getFront()
    {
        if(isEmpty())
        {
            return -1;
        }
        else
        {
            return arr[front];
        }
    }

    // Returns the last element of the deque. If the deque is empty, it returns -1.
    int getRear()
    {
        if( isEmpty())
        return -1;
        else
        return arr[rear];
    }

    // Returns true if the deque is empty. Otherwise returns false.
    bool isEmpty()
    {
        if(front == -1)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    // Returns true if the deque is full. Otherwise returns false.
    bool isFull()
    {
        if((front == 0 && rear == size-1) || (front != 0 && rear == (front-1)%(size-1)))
        return true;
        else
        return false;
    }
};
