#include <bits/stdc++.h>


int solve(vector<int> & nums)
{
    //create a dp 
    int n= nums.size();
    vector<int> dp(n,0);

    dp[0] = nums[0];
    for(int i=1;i<n;i++)
    {
        int incl = dp[i-2]+nums[i];
        int exclu = dp[i-1]+0;
        dp[i] = max(incl,exclu);
    }

    return dp[n-1];
}



long long int houseRobber(vector<int>& valueInHouse)
{
    //it is same as finding the maximum sum where no two elements are adjacent to each other
    /*
    but there are two cases
    1. the first house and last house form adjacent to each other as they are arranged in 
    circular manner so 
    1. consider houses from 0 to n-2
    2. consider houses from 1 to n-1

    */

    int n = valueInHouse.size();

    if(n==1)
    return valueInHouse[0];

    vector<int> first,second;
    for(int i=0;i<n;i++)
    {
        if(i!=n-1)
        first.push_back(valueInHouse[i]);
        if(i!=0)
        second.push_back(valueInHouse[i]);
    }


    int ans = max(solve(first),solve(second));

    return ans;
}
