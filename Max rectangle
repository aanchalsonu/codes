/*
Given a binary matrix M of size n X m. Find the maximum area of a rectangle formed only of 1s in the given matrix.

Example 1:

Input:
n = 4, m = 4
M[][] = {{0 1 1 0},
         {1 1 1 1},
         {1 1 1 1},
         {1 1 0 0}}
Output: 8
Explanation: For the above test case the
matrix will look like
0 1 1 0
1 1 1 1
1 1 1 1
1 1 0 0
the max size rectangle is 
1 1 1 1
1 1 1 1
and area is 4 *2 = 8.
Your Task: 
Your task is to complete the function maxArea which returns the maximum size rectangle area in a binary-sub-matrix with all 1â€™s.
The function takes 3 arguments the first argument is the Matrix M[ ] [ ] and the next two are two integers n and m which denotes the size of the matrix M. 
*/


//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;
#define MAX 1000


// } Driver Code Ends
/*You are required to complete this method*/

class Solution{
  public:
  
  vector<int> nextSmaller(int * arr, int n)
{
    // Write your code here.

    vector<int> ans(n);
    stack<int> s;
    s.push(-1);

    int i;
    
    for(i=n-1;i>=0;i--)
    {
        int curr = arr[i];
        while(s.top() != -1 &&  arr[s.top()] >= curr)
        {
            s.pop();
        }
        ans[i] = s.top();

        s.push(i);
    }
    return ans;
}


     vector<int> prevSmaller(int * arr, int n)
{
    // Write your code here.

    vector<int> ans(n);
    stack<int> s;
    s.push(-1);

    int i;
    
    for(i=0;i<n;i++)
    {
        int curr = arr[i];
        while(s.top() != -1 &&  arr[s.top()] >= curr)
        {
            s.pop();
        }
        ans[i] = s.top();

        s.push(i);
    }
    return ans;
}


    int largestRectangleArea(int * heights,int n) {
        int area,newarea,i,j;

        // int n = heights.size();

        vector<int> next(n);
        next = nextSmaller(heights,n);

        vector<int> prev;
        prev = prevSmaller(heights,n);

        area = 0;

        for(i=0;i<n;i++)
        {
            int l = heights[i];
            if(next[i] == -1)
            {
                next[i] = n;
            }
            int b = next[i]-prev[i]-1;
            newarea = l*b;
            area = max(area,newarea); 
        }

        return area;
    }
  
  
    int maxArea(int M[MAX][MAX], int n, int m) {
        int i,j;
        int area = largestRectangleArea(M[0],m);
        
        for(i=1;i<n;i++)
        {
            for(j=0;j<m;j++)
            {
                if(M[i][j] != 0)
                M[i][j] = M[i][j] + M[i-1][j];
                else
                M[i][j] = 0;
            }
            //M is updated
            // Now call the area function on updated value of M
            
            area = max(area,largestRectangleArea(M[i],m));
        }
        return area;
     }
};


//{ Driver Code Starts.
int main() {
    int T;
    cin >> T;

    int M[MAX][MAX];

    while (T--) {
        int n, m;
        cin >> n >> m;

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                cin >> M[i][j];
            }
        }
        Solution obj;
        cout << obj.maxArea(M, n, m) << endl;
    }
}

// } Driver Code Ends
