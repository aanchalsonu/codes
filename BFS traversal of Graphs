#include <bits/stdc++.h> 

void creatadj(unordered_map<int , set<int>> &adj, vector<pair<int, int>> edges)
{
    for(int i=0;i<edges.size();i++)
    {
        int u= edges[i].first;
        int v = edges[i].second;

        //create a undirected graph

        adj[u].insert(v);
        adj[v].insert(u);

    }
}

void bfs(unordered_map<int , set<int>>& adj, unordered_map<int,bool>& visited,
vector<int> & ans, int node)
{
    queue<int> q;
    q.push(node);
    visited[node] = true;

    while(!q.empty())
    {
        int qfront = q.front();
        q.pop();

        //push the answer into queue
        ans.push_back(qfront);

        //traverse the qfront node
        for(auto i : adj[qfront])
        {
            if(!visited[i])
            {
                q.push(i);
                visited[i] = true;
            }
        }
    }

}

vector<int> BFS(int vertex, vector<pair<int, int>> edges)
{
    //create a adjancency list 
    unordered_map<int , set<int>> adj;
    creatadj(adj,edges);

    vector<int> ans; // to store the answer
    //visited array
    unordered_map<int,bool> visited;

    for(int i=0;i<vertex;i++)
    {
        if(!visited[i])
        {
            bfs(adj,visited,ans,i);

        }
    }
    return ans;

}
