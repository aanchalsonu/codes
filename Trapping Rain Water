/*

Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.

Example 1:

Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water
(blue section) are being trapped.
*/

/*
SOLUTION APPROACH :

the approach is to divide array into two parts
and then calculate maximum value from left substract it with the each and every element on the left half
do the same for right half of the array

store the results where result will be the sum of all substracted values 

*/
class Solution {
public:
    int trap(vector<int>& height) {
        int maxleft=0,maxright=0,left=0,right;
        right = height.size()-1;

        int res=0;

        while(left<=right)
        {
            if(height[left] <= height[right])
            {
                if(height[left]> maxleft)
                maxleft = height[left];

                res = res +maxleft-height[left];
                left++;
            }
            else
            {
                if(height[right]> maxright)
                maxright = height[right];

                res = res + maxright-height[right];
                right--;
            }
        }
        return res;
    }
};
