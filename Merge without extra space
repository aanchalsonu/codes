/*

Given two sorted arrays arr1[] and arr2[] of sizes n and m in non-decreasing order. Merge them in sorted order without using any extra space. 
Modify arr1 so that it contains the first N elements and modify arr2 so that it contains the last M elements.
 

Example 1:

Input: 
n = 4, arr1[] = [1 3 5 7] 
m = 5, arr2[] = [0 2 6 8 9]
Output: 
arr1[] = [0 1 2 3]
arr2[] = [5 6 7 8 9]
Explanation:
After merging the two 
non-decreasing arrays, we get, 
0 1 2 3 5 6 7 8 9.
Example 2:

Input: 
n = 2, arr1[] = [10, 12] 
m = 3, arr2[] = [5 18 20]
Output: 
arr1[] = [5 10]
arr2[] = [12 18 20]
Explanation:
After merging two sorted arrays 
we get 5 10 12 18 20.


*/

//{ Driver Code Starts
#include <bits/stdc++.h> 
using namespace std; 


// } Driver Code Ends
class Solution{
    public:
        //Function to merge the arrays.
        void merge(long long arr1[], long long arr2[], int n, int m) 
        { 
            // code here 
            int i,j,k,l;
            i=n-1;
            j=0;
            
            //phela jitne bhi elements jo arr1 mai hai aur bade hai arr2 ka elements sa 
            //unko arr2 mai send kardo aur arr2 wala element arr1 mai 
            //swap arr2 aur arr1
            while(i >=0  && j < m )
            {
                
                if(arr2[j] < arr1[i])
                {
                    swap(arr2[j++],arr1[i--]);
                }
                else
                break;
                
            }  
      
      
            //     if(arr1[i] < arr2[j])
            //     {
            //         if(arr2[j] < arr2[j+1])
            //         {
            //             swap(arr1[i],arr2[j]);
            //             i++;
            //         }
            //         else if(arr2[j] > arr2[j+1])
            //         {
            //             swap(arr2[j], arr2[j+1]);
            //         }
            //     }
            //     else
            //     {
            //         if(arr2[j] < arr2[j+1] && arr2[j] < arr1[i])
            //         {
            //             swap(arr1[i], arr2[j]);
            //             j++;
            //         }
            //         else
            //         {
            //             swap(arr2[j], arr2[j+1]);
            //         }
            //     }
            
            // ab arr1 mai hai all the elemenst jo arr2 ka starting elements sa chota hai 
            // dono array ko sort kardo using sort function
            
            sort(arr1,arr1+n);
            sort(arr2,arr2+m);
        } 
};

//{ Driver Code Starts.

int main() 
{ 
	
	int T;
	cin >> T;
	
	while(T--){
	    int n, m;
	    cin >> n >> m;
	    
	    long long arr1[n], arr2[m];
	    
	    for(int i = 0;i<n;i++){
	        cin >> arr1[i];
	    }
	    
	    for(int i = 0;i<m;i++){
	        cin >> arr2[i];
	    }
	    Solution ob;
	    ob.merge(arr1, arr2, n, m); 

        for (int i = 0; i < n; i++) 
            cout<<arr1[i]<<" "; 
        
       
	    for (int i = 0; i < m; i++) 
		    cout<<arr2[i]<<" "; 
	    
	    cout<<endl;
	}

	return 0; 
} 

// } Driver Code Ends
