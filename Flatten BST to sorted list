// Flatten the BST to form a list 
Can also be done by finding Inorder traversal and then creatind nodes and linking them


#include <bits/stdc++.h> 
/************************************************************

    Following is the Binary Tree node structure
    
    template <typename T>
    class TreeNode {
        public :
        T data;
        TreeNode<T> *left;
        TreeNode<T> *right;

        TreeNode(T data) {
            this -> data = data;
            left = NULL;
            right = NULL;
        }

        ~TreeNode() {
            if(left)
                delete left;
            if(right)
                delete right;
        }
    };

************************************************************/


void Inorder(TreeNode<int>* root, vector<int>& inorderVal)
{
    if(root == NULL)
    return;

    Inorder(root->left,inorderVal);
    inorderVal.push_back(root->data);
    Inorder(root->right,inorderVal);

}


TreeNode<int>* flatten(TreeNode<int>* root)
{
    if(root == NULL)
    return NULL;

    //to store INorder traversal
    vector<int> inorderVal;
    Inorder(root,inorderVal);

    //first node created manually for new BST
    TreeNode<int> * newroot = new TreeNode<int>(inorderVal[0]);

    TreeNode<int> * curr = newroot;

    for(int i=1;i<inorderVal.size();i++)
    {
        TreeNode<int> * temp = new TreeNode<int>(inorderVal[i]);
        curr->left = NULL;
        curr->right = temp;
        curr = temp;
    }

    curr->left = NULL;
    curr->right = NULL;
    
    return newroot;
}
