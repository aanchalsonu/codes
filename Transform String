/*

Given two strings A and B. Find the minimum number of steps required to transform string A into string B. The only allowed operation for the transformation
is selecting a character from string A and inserting it in the beginning of string A.

Example 1:

Input:
A = "abd"
B = "bad"
Output: 1
Explanation: The conversion can take place in
1 operation: Pick 'b' and place it at the front.
Example 2:

Input:
A = "GeeksForGeeks"
B = "ForGeeksGeeks"
Output: 3
Explanation: The conversion can take
place in 3 operations:
Pick 'r' and place it at the front.
A = "rGeeksFoGeeks"
Pick 'o' and place it at the front.
A = "orGeeksFGeeks"
Pick 'F' and place it at the front.
A = "ForGeeksGeeks"

*/


//{ Driver Code Starts
#include <bits/stdc++.h>
#include <unordered_map>
using namespace std;


// } Driver Code Ends
class Solution
{
    public:
    int transform (string A, string B)
    {
        //code here.
        string a = A;
        string b = B;
        sort(a.begin(),a.end());
        sort(b.begin(),b.end());
        int n = A.length();
        int i,j;
        
        //Phela check karo ke sabhi charcaters present hai ya nahi
        //agar nahi hai tho wahe sa -1 return kardo
        
        for(i=0;i<n;i++)
        {
            if(a[i] != b[i] )
            return -1;
        }
        
        //ab string A aur B ko compare karo aur agar kahi pa match nahi hota hai tho count 
        // ko increase kardo aur i ko decrement kardo, j wahe pa rahega
        i = A.length()-1;
        j = B.length()-1;
        int count=0;
        while(i>=0 && j>=0)
        {
            if(A[i] == B[j])
            {
                i--;
                j--;
            }
            else if(A[i] != B[j])
            {
                i--;
                count++;
            }
        }
        return count;
    }
};


//{ Driver Code Starts.

int main () 
{
    int t; cin >> t;
    while (t--)
    {
        string A, B; 
        cin >> A >> B;
        Solution ob;
        cout <<ob.transform (A, B) << endl;
    }
}
// } Driver Code Ends
