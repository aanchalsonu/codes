/*

A number N is represented in Linked List such that each digit corresponds to a node in linked list. You need to add 1 to it.

Example 1:

Input:
LinkedList: 4->5->6
Output: 457 
Example 2:

Input:
LinkedList: 1->2->3
Output: 124 
Your Task:
Your task is to complete the function addOne() which takes the head of the linked list as the only argument and returns the 
head of the modified linked list. The driver code prints the number.
Note: The head represents the left-most digit of the number.

*/


//{ Driver Code Starts
//Initial template for C++

#include <bits/stdc++.h> 
using namespace std; 

struct Node
{
    int data;
    struct Node* next;
    
    Node(int x){
        data = x;
        next = NULL;
    }
};

void printList(Node* node) 
{ 
    while (node != NULL) { 
        cout << node->data; 
        node = node->next; 
    }  
    cout<<"\n";
} 


// } Driver Code Ends
//User function template for C++

/* 

struct Node
{
    int data;
    struct Node* next;
    
    Node(int x){
        data = x;
        next = NULL;
    }
};

*/

class Solution
{
    public:
      Node *reverse(Node*head)
    { if(head==NULL|| head->next==NULL)
       {
           return head;
       }
        Node *curr= head;
        Node *prev=NULL;
        Node* forward=NULL;
        while(curr!=NULL)
        {
            forward = curr->next;
            curr->next = prev;
            prev = curr;
            curr = forward;
        }
        return prev;
    }
    Node* addOne(Node *head) 
    {
      head= reverse(head);
      Node* temp= head;
      while(temp!=NULL)
      {
      if(temp->data==9&&temp->next==NULL)
      {
          temp->data=1;
          Node *t= new Node(0);
          t->next= head;
          head=t;
      }
      else if(temp->data==9)
      {
          temp->data=0;
      }
      else
      {
          temp->data= temp->data+1;
          break;
      }
       temp= temp->next;
      }
      head = reverse(head);
      return head;
        
    }


    
    
    
    
    
    
    
    // Node* addOne(Node *head) 
    // {
    //     // Your Code here
    //     // return head of list after adding one
    //     int i;
    //     Node *t = head;
    //     Node * res = new Node(-1);
    //     string s="";
        
    //     while(t != NULL)
    //     {
    //         s = s + to_string(t->data);
    //         t = t->next;
    //     }
        
    //     int sum = stoi(s) + 1;
    //     vector<int> v;
        
    //     while(sum > 0)
    //     {
    //         int r = sum%10;
    //         v.push_back(r);
    //         sum = sum/10;
    //     }
        
    //     reverse(v.begin(),v.end());
        
    //     for(i=0;i<v.size();i++)
    //     {
    //         Node * temp = new Node(v[i]);
    //         res->next = temp;
    //     }
        
    //     return res;
    // }
};

//{ Driver Code Starts.

int main() 
{ 
    int t;
    cin>>t;
    while(t--)
    {
        string s;
        cin>>s;
        
        Node* head = new Node( s[0]-'0' );
        Node* tail = head;
        for(int i=1; i<s.size(); i++)
        {
            tail->next = new Node( s[i]-'0' );
            tail = tail->next;
        }
        Solution ob;
        head = ob.addOne(head);
        printList(head); 
    }
    return 0; 
} 

// } Driver Code Ends
