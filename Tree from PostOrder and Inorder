/*

Given inorder and postorder traversals of a Binary Tree in the arrays in[] and post[] respectively. The task is to construct the binary 
tree from these traversals.

Example 1:

Input:
N = 8
in[] = 4 8 2 5 1 6 3 7
post[] =8 4 5 2 6 7 3 1
Output: 1 2 4 8 5 3 6 7
Explanation: For the given postorder and
inorder traversal of tree the  resultant
binary tree will be
           1
       /      \
     2         3
   /  \      /  \
  4    5    6    7
   \
     8
 

Example 2:

Input:
N = 5
in[] = 9 5 2 3 4
post[] = 5 9 3 4 2
Output: 2 9 5 4 3
Explanation:  
the  resultant binary tree will be
           2
        /     \
       9       4
        \     /
         5   3

*/


//{ Driver Code Starts
/* program to construct tree using inorder and postorder traversals */
#include <bits/stdc++.h>
using namespace std;

/* A binary tree node has data, pointer to left child
   and a pointer to right child */
struct Node {
    int data;
    struct Node* left;
    struct Node* right;

    Node(int x) {
        data = x;
        left = right = NULL;
    }
};

/* This funtcion is here just to test buildTreeUtil() */
void preOrder(Node* node) {
    if (node == NULL) return;

    /* then print the data of node */
    printf("%d ", node->data);

    /* first recur on left child */
    preOrder(node->left);

    /* now recur on right child */
    preOrder(node->right);
}

Node* buildTree(int in[], int post[], int n);

int main() {
    int t, n;
    cin >> t;
    while (t--) {
        cin >> n;
        int in[n], post[n];
        for (int i = 0; i < n; i++) cin >> in[i];
        for (int i = 0; i < n; i++) cin >> post[i];
        Node* root = buildTree(in, post, n);
        preOrder(root);
        cout << endl;
    }
    return 0;
}

// } Driver Code Ends


/* Tree node structure

struct Node
{
    int data;
    struct Node* left;
    struct Node* right;

    Node(int x){
        data = x;
        left = right = NULL;
    }
};*/

//Function to return a tree created from postorder and inoreder traversals.

    // int findPosition(int in[],int ele,int start,int n)
    // {
    //     for(int i=start;i<n;i++)
    //     {
    //         if( in[i] == ele)
    //         return i;
    //     }
    //     return -1;
    // }
    
    // Node* solve(int in[],int post[], int& pindex,int inIndexStart,int inIndexLast,int n,map<int,int>&mp)
    // {
    //     //base case
    //     if(pindex < 0 || inIndexStart > inIndexLast)
    //     return NULL;
        
    //     //create a node 
    //     int element = post[pindex--];
    //     Node * root = new Node(element);
    //     int pos  = mp[element];
        
    //     //calls to left and right part
    //     root->left = solve(in,post,pindex,pos+1,inIndexLast,n,mp);
    //     //call to roght side
    //     root->right = solve(in,post,pindex,inIndexStart,pos-1,n,mp);
        
    //     return root;
        
        
    // }


    // Node *buildTree(int in[], int post[], int n) {
    //     map<int,int>mp;

    // for(int i=0;i<n;i++)

    // {

    //     mp[in[i]]=i;

    // }
    //     int pindex=n-1;
    //     Node * ans= solve(in,post,pindex,0,n-1,n,mp);
    //     return ans;
    // }


Node*solve(int in[], int post[], int &index,int s,int e,int n,map<int,int>&mp)

{

    if(index<0 || s>e)

    return NULL;

    int element=post[index--];

    Node*root=new Node(element);

    int pos=mp[element];

    root->right=solve(in,post,index,pos+1,e,n,mp);

    root->left=solve(in,post,index,s,pos-1,n,mp);

    return root;

}

//Function to return a tree created from postorder and inoreder traversals.

Node *buildTree(int in[], int post[], int n) {

    map<int,int>mp;

    for(int i=0;i<n;i++)

    {

        mp[in[i]]=i;

    }

    

    int index=n-1;

    return solve(in,post,index,0,n-1,n,mp);

    // Your code here

}




