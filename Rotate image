/*
You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).

You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.
*/

//the simple idea is to play with indices 


class Solution {
public:
    void rotate(vector<vector<int>>& matrix) {
        int i,j,row,col,n,temp;
        row = matrix.size(); // row size
        n = matrix[0].size(); //column size 
        for(i=0;i<(n+1)/2;i++) 
        {
            for(j=0;j<(n/2);j++)
            {
                temp= matrix[n-1-j][i]; //first store the first corner element into temp
                matrix[n-1-j][i] = matrix[n-1-i][n-1-j]; //keep swapping the next corner elements 
                matrix[n-1-i][n-1-j] = matrix[j][n-i-1];
                matrix[j][n-i-1] = matrix[i][j];
                matrix[i][j] = temp; //place the first element into its correct place
            }
        }
    }
};
