/*
You are given a string s consisting of lowercase English letters. A duplicate removal consists of choosing two adjacent and equal letters and removing them.

We repeatedly make duplicate removals on s until we no longer can.

Return the final string after all such duplicate removals have been made. It can be proven that the answer is unique.*/

class Solution {
public:
    string removeDuplicates(string s) {
        string temp;
        for(char ch : s)
        {
            if(! temp.empty() && temp[temp.size()-1] == ch)
            {
                temp.pop_back();
            }
            else
            temp += ch;
        }
        return temp;





        // int i,j,n1,n2;
        // n1 = s.length();
        // n2 = 0;
        // while(n1 != n2)
        // {
        //     temp.erase(0,temp.length());
        //     for(i=0;i<s.length()-1;)
        //     {
        //         if(s[i] != s[i+1])
        //         {
        //             temp.push_back(s[i]);
        //             i++;
        //         }
        //         else
        //         {
        //             i=i+2;
        //         }
        //     }
        //     n1 = s.length();
        //     n2 = temp.length();
        //     s = temp;
        // }
        // return s;
    }
};
