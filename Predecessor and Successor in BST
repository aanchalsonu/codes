// can also be found by finding inorder traversal and return the adjacent elements of the key

#include <bits/stdc++.h> 
/*************************************************************

    Following is the Binary Tree node structure

    template <typename T>

    class BinaryTreeNode
    {
    public :
        T data;
        BinaryTreeNode<T> *left;
        BinaryTreeNode<T> *right;

        BinaryTreeNode(T data) {
            this -> data = data;
            left = NULL;
            right = NULL;
        }

        ~BinaryTreeNode() {
            if (left)
            {
                delete left;
            }
            if (right)
            {
                delete right;
            }
        }
    };

*************************************************************/

pair<int,int> predecessorSuccessor(BinaryTreeNode<int>* root, int key)
{
    BinaryTreeNode<int>* temp = root;
    int pred=-1;
    int succ =-1;

    while(temp->data != key)
    {
        if(temp->data > key)
        {
            succ = temp->data;
            temp = temp->left;
        }
        else
        {
            pred = temp->data;
            temp = temp->right;
        }
    }

    //calculate predecpredecessor and successor

    //predecessor : maximum value in right subtree

    BinaryTreeNode<int>* leftsubtree = temp->left;  

    while(leftsubtree != NULL)
    {
        pred = leftsubtree->data;
        leftsubtree = leftsubtree->right;
    }

    BinaryTreeNode<int>* rightsubtree = temp->right;  

    while(rightsubtree != NULL)
    {
        succ = rightsubtree->data;
        rightsubtree = rightsubtree->left;
    }

    pair<int,int> ans = make_pair(pred,succ);
    return ans;
    
}
