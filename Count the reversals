/*

Given a string S consisting of only opening and closing curly brackets '{' and '}', find out the minimum number of reversals
required to convert the string into a balanced expression.
A reversal means changing '{' to '}' or vice-versa.

Example 1:

Input:
S = "}{{}}{{{"
Output: 3
Explanation: One way to balance is:
"{{{}}{}}". There is no balanced sequence
that can be formed in lesser reversals.
â€‹Example 2:

Input: 
S = "{{}{{{}{{}}{{"
Output: -1
Explanation: There's no way we can balance
this sequence of braces.

*/



//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

int countRev (string s);
int main()
{
    int t; cin >> t;
    while (t--)
    {
        string s; cin >> s;
        cout << countRev (s) << '\n';
    }
}

// Contributed By: Pranay Bansal
// } Driver Code Ends



int countRev (string s)
{
    // your code here
    
    int open =0;
    int count=0;
    int close=0;
    int i;
    
    if(s.length()%2 == 1)
    return -1;
    
    for(i=0;i<s.length();i++)
    {
        if(s[i] == '{')
        open++;
        else
        {
            if(open == 0 && s[i] == '}')
            {
                count++;
                open++;
            }
            else
            open--;
        }
    }
    
    return count+(open/2);
    
}


