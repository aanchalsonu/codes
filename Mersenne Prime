/*

Mersenne Prime is a prime number that is one less than a power of two. In other words, any prime is Mersenne Prime if it is of the form 2k-1
where k is an integer greater than or equal to 2. First few Mersenne Primes are 3, 7, 31 and 127.
The task is to find all Mersenne Primes smaller than equal to an input positive integer n.
 

Example 1:

Input: n = 10
Output: 3 7
Explanation:3 and 7 are only prime numbers
which are less than equal to 10 and in the
form of 2k - 1. 
Example 2:

Input: n = 100
Output: 3 7 31
Explanation: 3, 7 and 31 are only prime
numbers which are less than equal to 100
and in the form of 2k - 1.

*/


//{ Driver Code Starts

#include<bits/stdc++.h>
using namespace std;

// } Driver Code Ends

class Solution{
	public:
	
	bool isprime(int n)
	{
	    for(int i=2;i<sqrt(n);i++)
	    {
	        if(n%i == 0)
	        return false;
	    }
	    return true;
	}
	
	vector<int> AllMersennePrimeNo(int N)
	{
	    // Code here
	    int i,j;
	    vector<int> res;
	    i=2;
	    while(pow(2,i)-1 <= N)
	    {
	        j = pow(2,i)-1;
	        if(isprime(j))
	        res.push_back(j);
	        i++;
	    }
	    return res;
	    
	    
	    
	}
};

//{ Driver Code Starts.
int main(){
	int tc;
	cin >> tc;
	while(tc--){
		int n;
		cin >> n;
		Solution ob;
		vector<int> ans = ob.AllMersennePrimeNo(n);
		for(auto i: ans)
			cout << i <<" ";
		cout <<"\n";
	}
	return 0;
}
// } Driver Code Ends
