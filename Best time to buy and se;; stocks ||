/*
You are given an integer array prices where prices[i] is the price of a given stock on the ith day.

On each day, you may decide to buy and/or sell the stock. You can only hold at most one share of the stock at any time. However, you can buy it then immediately
sell it on the same day.

Find and return the maximum profit you can achieve.

 

Example 1:

Input: prices = [7,1,5,3,6,4]
Output: 7
Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.
Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.
Total profit is 4 + 3 = 7.
Example 2:

Input: prices = [1,2,3,4,5]
Output: 4
Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.
Total profit is 4.
Example 3:

Input: prices = [7,6,4,3,1]
Output: 0
Explanation: There is no way to make a positive profit, so we never buy the stock to achieve the maximum profit of 0.

*/

class Solution {
public:

    int solve(int index, int buy,vector<int>& prices)
    {
        //base case
        if(index >= prices.size())
        return 0;

        //if you can buy then 
        //there are two cases either buy or sell , if allready buyed then only option is sell
        // if buying then profit with decrease by price[i] and if selling profit will increase by
        //  price[i]

        int profit=0; 
        if(buy)
        {
            //buy : if buy is 1 then im allowed to buy and mark it 0 so that no other stock can be buyed
            int buykaro = -prices[index] + solve(index+1,0,prices);
            int skipkaro = 0 + solve(index+1,1,prices);
            profit  = max(buykaro,skipkaro);
        }
        else
        {
            //sell
            int sellkaro = prices[index] + solve(index+1,1,prices);
            int skipkaro = 0 + solve(index+1,0,prices);
            profit = max(sellkaro,skipkaro);
        }
        return profit;
    }

    int solveMem(int index, int buy,vector<int>& prices,vector<vector<int>> &dp)
    {
        //base case
        if(index >= prices.size())
        return 0;

        //if you can buy then 
        //there are two cases either buy or sell , if allready buyed then only option is sell
        // if buying then profit with decrease by price[i] and if selling profit will increase by
        //  price[i]

        if(dp[index][buy] != -1)
        return dp[index][buy];

        int profit=0; 
        if(buy)
        {
            //buy : if buy is 1 then im allowed to buy and mark it 0 so that no other stock can be buyed
            int buykaro = -prices[index] + solveMem(index+1,0,prices,dp);
            int skipkaro = 0 + solveMem(index+1,1,prices,dp);
            profit  = max(buykaro,skipkaro);
            dp[index][buy] = profit;
        }
        else
        {
            //sell
            int sellkaro = prices[index] + solveMem(index+1,1,prices,dp);
            int skipkaro = 0 + solveMem(index+1,0,prices,dp);
            profit = max(sellkaro,skipkaro);
            dp[index][buy] = profit;
        }
        return dp[index][buy];
    }

    int maxProfit(vector<int>& prices) {
        // return solve(0,1,prices);

        int n = prices.size();
        vector<vector<int>> dp(n,vector<int> (2,-1));
        return solveMem(0,1,prices,dp);
    }
};
