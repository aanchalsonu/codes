/*
In daily share trading, a buyer buys shares in the morning and sells them on the same day. If the trader is allowed to make at most 2
transactions in a day, the second transaction can only start after the first one is complete (Buy->sell->Buy->sell). The stock prices 
throughout the day are represented in the form of an array of prices. 

Given an array price of size N, find out the maximum profit that a share trader could have made.

Example 1:

Input:
6
10 22 5 75 65 80
Output:
87
Explanation:
Trader earns 87 as sum of 12, 75 
Buy at 10, sell at 22, 
Buy at 5 and sell at 80
Example 2:

Input:
7
2 30 15 10 8 25 80
Output:
100
Explanation:

Trader earns 100 as sum of 28 and 72
Buy at price 2, sell at 30,
Buy at 8 and sell at 80

*/



//{ Driver Code Starts
//Initial Template for C++
#include<bits/stdc++.h>
using namespace std;


// } Driver Code Ends
//User function Template for C++


// int solve(int index,int buy,vector<int>&price,int k)
// {
//     //base cases
    
    
//     if(index >= price.size()-1)
//     return 0;
    
//     if(k==0)
//     return 0;
//     // if(dp[index] != -1)
//     // return dp[index];
//     int profit=0;
//     if(buy)
//     {
//         int buykaro = -price[index] + solve(index+1,0,price,k);
//         int skipkaro = solve(index+1,1,price,k);
        
//         profit = max(buykaro,skipkaro);
        
//     }
//     else
//     {
//         int sellkaro = price[index] + solve(index+1,1,price,k--);
//         int skipkaro = solve(index+1,0,price,k);
        
//         profit = max(sellkaro,skipkaro);
//         // dp[index] = profit;
//     }
    
//     return profit;
// }


int dp[100001][2][3]={-1};
// vector<vector<vector<int>>> dp(10000001,vector<vector<int>>(2,vector<int>(3,-1)));
int solve(int index,int buy,vector<int>&price,int k)
{
    if(index >= price.size())
    return 0;
    
    if(k==0)
    return 0;
    
    if(dp[index][buy][k] != -1)
    return dp[index][buy][k];
    
    int profit=0;
    
    if(buy)
    {
        int buykaro = -price[index] + solve(index+1,0,price,k);
        int skipkaro = solve(index+1,1,price,k);
        profit = max(buykaro,skipkaro);
        
    }
    else
    {
        int sellkaro = price[index] + solve(index+1,1,price,k-1);
        int skipkaro = solve(index+1,0,price,k);
        profit = max(sellkaro,skipkaro);
    }
    
    return dp[index][buy][k] = profit;
}


int maxProfit(vector<int>&price){
    //Write your code here..
    int n = price.size();    
   
    memset(dp,-1,sizeof(dp));
    return solve(0,1,price,2);
}

//{ Driver Code Starts.

int main(){
    int t;
    cin>>t;
    while(t--){
        
        int n;
        cin>>n;
        vector<int> price(n);
        for(int i=0;i<n;i++) cin>>price[i];
        cout<<maxProfit(price)<<endl;
    }

}

// } Driver Code Ends
