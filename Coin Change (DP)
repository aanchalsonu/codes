/*

Given an integer array coins[ ] of size N representing different denominations of currency and an integer sum, find the number 
of ways you can make sum by using different combinations from coins[ ].  
Note: Assume that you have an infinite supply of each type of coin. 


Example 1:

Input:
sum = 4 , 
N = 3
coins[] = {1,2,3}
Output: 4
Explanation: Four Possible ways are:
{1,1,1,1},{1,1,2},{2,2},{1,3}.
Example 2:

Input:
Sum = 10 , 
N = 4
coins[] ={2,5,3,6}
Output: 5
Explanation: Five Possible ways are:
{2,2,2,2,2}, {2,2,3,3}, {2,2,6}, {2,3,5} 
and {5,5}.

*/

//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution {
  public:
    
    long long solve(int sum,int n, vector<vector<long long>> &dp,int coins[])
    {
        if(sum ==0 )
        return 1;
        
        if(sum <0 )
        return 0;
        
        if(n<0)
        return 0;
        
        if(dp[n][sum] != -1)
        return dp[n][sum];
        
        dp[n][sum] = solve(sum-coins[n],n,dp,coins)+solve(sum,n-1,dp,coins);
        return dp[n][sum];
    }
  
  
  
  
    long long int count(int coins[], int N, int sum) {

        // code here.
        
        vector<vector<long long>> dp(N,vector<long long>(sum+1,-1));
        return solve(sum,N-1,dp,coins);
    }
};

//{ Driver Code Starts.
int main() {
    int t;
    cin >> t;
    while (t--) {
        int sum, N;
        cin >> sum >> N;
        int coins[N];
        for (int i = 0; i < N; i++) cin >> coins[i];
        Solution ob;
        cout << ob.count(coins, N, sum) << endl;
    }

    return 0;
}


// } Driver Code Ends
