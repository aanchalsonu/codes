/*

Given an unsorted array Arr of size N of positive integers. One number 'A' from set {1, 2, N} is missing and one number 'B' occurs 
twice in array. Find these two numbers.

Example 1:

Input:
N = 2
Arr[] = {2, 2}
Output: 2 1
Explanation: Repeating number is 2 and 
smallest positive missing number is 1.
Example 2:

Input:
N = 3
Arr[] = {1, 3, 3}
Output: 3 2
Explanation: Repeating number is 3 and 
smallest positive missing number is 2.

*/

//{ Driver Code Starts
#include <bits/stdc++.h>

using namespace std;

// } Driver Code Ends
class Solution{
public:


     int *findTwoElement(int *arr, int n) {

    unordered_map<int,int> mp;

    int *result=new int[2];

    

    for (int i=0;i<n;i++)

    {

        mp[arr[i]]++;

    }

    

    for ( auto it:mp)

    { 

        if(it.second==2) result[0]=it.first;  // repeat 

    }

    for(int i=1;i<=n;i++)

    {

        if(mp.find(i)==mp.end())

        {

            result[1]=i; // missing 

            break;

        }

    }

    

    return result;

    }
    
    // int *findTwoElement(int *arr, int n) {
    //     map<int,int>mp;
    //     int *res = new int[2];
    //     for(int i=0;i<n;i++)
    //     mp[arr[i]]++;
        
    //     for(auto i:mp)
    //     {
    //         if(i.second == 2)
    //         res[0] = i.first;
    //     }
        
    //     for(int i=1;i<n;i++)
    //     {
    //         if(mp.find(i) == mp.end())
    //         {
    //             res[1] = i;
    //             break;
    //         }
    //     }
        
    //     return res;
    // }
};

//{ Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {
        int n;
        cin >> n;
        int a[n];
        for (int i = 0; i < n; i++) {
            cin >> a[i];
        }
        Solution ob;
        auto ans = ob.findTwoElement(a, n);
        cout << ans[0] << " " << ans[1] << "\n";
    }
    return 0;
}
// } Driver Code Ends
