/*

Given a string A and a dictionary of n words B, find out if A can be segmented into a space-separated sequence of dictionary words.

Note: From the dictionary B each word can be taken any number of times and in any order.
Example 1:

Input:
n = 12
B = { "i", "like", "sam",
"sung", "samsung", "mobile",
"ice","cream", "icecream",
"man", "go", "mango" }
A = "ilike"
Output:
1
Explanation:
The string can be segmented as "i like".

Example 2:

Input:
n = 12
B = { "i", "like", "sam",
"sung", "samsung", "mobile",
"ice","cream", "icecream", 
"man", "go", "mango" }
A = "ilikesamsung"
Output:
1
Explanation:
The string can be segmented as 
"i like samsung" or "i like sam sung".

*/

//{ Driver Code Starts
//Initial template for C++

#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
//User function template for C++

// A : given string to search
// B : vector of available strings

class Solution
{
public:

    unordered_map<string,int> dp;
    int solve(string a, vector<string> &b)
    {
        int sz = a.length();
        if(sz==0)
        return 1;
        
        if(dp[a]!=0)
        return dp[a];
        
        //find substring and call the function
        for(int i=0;i<=sz;i++)
        {
            string ss = a.substr(0,i);
            int f=0;
            for(int j=0;j<b.size();j++)
            {
                if(ss.compare(b[j]) == 0)
                {
                    f=1;
                    break;
                }
            }
            
            if(f==1 && solve(a.substr(i,sz-i),b) == 1)
           return dp[a] = 1;
        }
        return dp[a]=-1;
    }



    int wordBreak(string A, vector<string> &B) {
        int x = solve(A,B);
        if(x==1)
        return 1;
        else
        return 0;
    }
};

//{ Driver Code Starts.

int main(){
    int t;
    cin>>t;
    while(t--){
        int n;
        cin>>n;
        vector<string> dict;
        for(int i=0;i<n;i++){
            string S;
            cin>>S;
            dict.push_back(S);
        }
        string line;
        cin>>line;
        Solution ob;
        cout<<ob.wordBreak(line, dict)<<"\n";
    }
}

// } Driver Code Ends
