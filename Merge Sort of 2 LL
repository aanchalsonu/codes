// #include <bits/stdc++.h> 
// /**********************************************************************

//     Following is the class structure of the Node class for reference:

//     class Node{
//     public:
//         int data;
//         Node *next;
//         Node(int data)
//         {
// 	        this->data = data;
// 	        this->next = NULL;
//         }
//     };

// ********************************************************************/

// Node * findMid(Node * head)
// {
//     if(head == NULL)
//     return NULL;

//     Node * slow = head;
//     Node* fast = head->next;
//     while(fast != NULL && fast->next != NULL)
//     {
//         fast = fast->next->next;
//         slow = slow->next;

//     } 
//     return slow;
// }

// Node * merge(Node * left,Node * right)
// {
//     if(left == NULL)
//     return right;

//     if(right == NULL)
//     return left;

//     Node *ans = new Node(-1);
//     Node * temp = ans;

//     while(left != NULL && right != NULL)
//     {
//         if(left->data < right->data)
//         {
//             temp->next = left;
//             temp = left;
//             left = left->next;
//         }
//         else
//             temp->next = right;
//             temp = right;
//             right = right->next;
            
//         }
//     }

//     while(left != NULL)
//     {
//         temp->next = left;
//         temp = left;
//         left = left->next;
//     }

//     while(right != NULL)
//     {
//         temp->next = right;
//         temp = right;
//         right = right->next;
//     }

//     ans = ans->next;
//     return ans;

// }



// Node *sortLL(Node *head){

//     if(head == NULL || head->next == NULL)
//     return head;

//     Node * mid;
//     mid = findMid(head);

//     Node * left = head;
//     Node * right = mid->next;
//     mid->next = NULL;
    
//     left = sortLL(left);
//     right = sortLL(right);

//     Node * result = merge(left,right);
//     return result;

// }





Node* findMid(Node* head)
{    Node* slow=head;    
    Node*fast=head->next;        
    while(fast!=NULL && fast->next!=NULL){        
        slow=slow->next;        
        fast=fast->next->next;    
        }    
        return slow; 
}

Node* merge(Node* left,Node* right) {
        //Base Case......    
        if(left==NULL){        
            return right;    
        }    
        if(right==NULL){        
            return left;    
        }    
        //Create A Dummy Node.....    
        Node* ans=new Node(-1);    
        Node* temp=ans;        
        //merge two sorted LL's    
        
        while(left!=NULL && right!=NULL){        
            if(left->data<right->data){            
                temp->next=left;            
                temp=left;            
                left=left->next;        
            }        
            else{            
                temp->next=right;            
                temp=right;            
                right=right->next;        
            }    
        }    
        while(left!=NULL){        
            temp->next=left;        
            temp=left;        
            left=left->next;    }    
        
        while(right!=NULL){        
            temp->next=right;        
            temp=right;        
            right=right->next;    }    
            
        ans=ans->next;    
        return ans; } 
        
Node *sortLL(Node *head){        //Base Case-  if list is empty or have single element......    
    if(head==NULL || head->next==NULL){        
        return head;    
    }        //Find Mid Element Of LL......    
    Node* mid=findMid(head);        //After Finding Mid Divide list in two halves.....    
    Node* left=head;    
    Node* right=mid->next;   
     mid->next=NULL;        
     //Recursive call to sort both the halves.....    
     
    left=sortLL(left);    
    right=sortLL(right);        
    //merge sorted halves now....    
    
    Node* ans=merge(left,right);    return ans; }
